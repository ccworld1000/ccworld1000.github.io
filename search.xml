<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CCColor Simple and flexible color color conversion module for Raku Perl 6]]></title>
    <url>%2F2018%2F11%2F20%2FCCColor-Simple-and-flexible-color-color-conversion-module-for-Raku-Perl-6%2F</url>
    <content type="text"><![CDATA[CCColor12Simple and flexible color color conversion module for Raku Perl 6 , easy-to-use simple learning. ## HEX Color (use CCColor) ## See test123456789101112131415161718192021222324252627use CCColor;my @list =(" #FFFEA963 "," #FF FE A9 63 "," #FF # FE # A9 # 63 "," #"," #1"," #123"," #FFH"," #FHF"," #1234"," #12345"," #FFEE5"," #FFEE56"," #FFEE56A"," #FFEE56AH"," #FFEE56AA"," #FFEE56AA11"," #FFEE56AAFF11",);for @list -&gt; $color &#123; my ($r, $g, $b, $a) = hex2rgba($color); say "$r, $g, $b, $a";&#125; Call test/test.p6 ## Local installation and unloading12zef install .zef uninstall CCColor ## Network install12zef updatezef install CCColor]]></content>
      <categories>
        <category>Perl 6</category>
      </categories>
      <tags>
        <tag>color</tag>
        <tag>CCColor</tag>
        <tag>draw</tag>
        <tag>pie</tag>
        <tag>line</tag>
        <tag>graphics</tag>
        <tag>chart</tag>
        <tag>raku</tag>
        <tag>Perl 6</tag>
        <tag>perl6</tag>
        <tag>Perl 5</tag>
        <tag>Perl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Simple draw chart for Perl 6]]></title>
    <url>%2F2018%2F11%2F12%2FSimple-draw-chart-for-Perl-6%2F</url>
    <content type="text"><![CDATA[Simple draw chart for Perl 6 , easy-to-use simple learning.Local installation and unloading12zef install .zef uninstall CCChart Network install12zef updatezef install CCChart CCChart pie ## CCChart lines ## CCChart testThe call will generate a default “default.png” in the command line execution directory.]]></content>
      <categories>
        <category>Perl 6</category>
      </categories>
      <tags>
        <tag>draw</tag>
        <tag>pie</tag>
        <tag>line</tag>
        <tag>graphics</tag>
        <tag>chart</tag>
        <tag>Perl 6</tag>
        <tag>perl6</tag>
        <tag>Perl 5</tag>
        <tag>Perl</tag>
        <tag>CCLog</tag>
        <tag>CCChart</tag>
        <tag>png</tag>
        <tag>Cairo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CCLog Simple and lightweight cross-platform logs]]></title>
    <url>%2F2018%2F11%2F01%2FCCLog-Simple-and-lightweight-cross-platform-logs%2F</url>
    <content type="text"><![CDATA[CCLog1234Simple and lightweight cross-platform logs,easy-to-use simple learning,and support for multiple languages,such as C, C++, Perl 6, shell, Objective-C ## Perl 61There are 2 (CCLog &amp; CCLogFull) ways of binding. Call CCLog.pm6 Call CCLogFull.pm6 ## Shell12345678910111213Provide simple commands. fg: ccnormal ccwarning ccerror cctimer ccloop ccthread ccprint ccsay ccdie ccnetworkThese commands are automatically installed locally and can be called directly. Call shell ## C &amp;&amp; C++ &amp;&amp; Objective-C1You can use C library or C source (CCLog.h CCLog.c) code directly. Call C &amp;&amp; C++ &amp;&amp; Objective-C ## Objective-C1Objective-C can call C directly, Or follow other ways to import. ## Local installation and unloading12zef install .zef uninstall CCLog ## Network install12zef updatezef install CCLog ## Check if the installation is successfulThe installation may be as follows Installation failure may be as follows, you can try again ## Color display controlPerl6 CCLog.pm6 call ccshowColor Perl6 CCLogFull.pm6 call CCLog_showColor C &amp;&amp; C++ &amp;&amp; Objective-C call CCLog_showColor fg: ## Tips display controlfg:]]></content>
      <categories>
        <category>Perl 6</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Perl 6</tag>
        <tag>perl6</tag>
        <tag>Perl 5</tag>
        <tag>Perl</tag>
        <tag>CCLog</tag>
        <tag>cclog</tag>
        <tag>logs</tag>
        <tag>log</tag>
        <tag>cross-platform</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cairo 2D Graphics library binding for Perl 6]]></title>
    <url>%2F2018%2F10%2F15%2FCairo-2D-Graphics-library-binding-for-Perl-6%2F</url>
    <content type="text"><![CDATA[Cairo 2D Graphics library binding for Perl 6Synopsis12345678910use Cairo;given Cairo::Image.create(Cairo::FORMAT_ARGB32, 128, 128) &#123; given Cairo::Context.new($_) &#123; .rgb(0, 0.7, 0.9); .rectangle(10, 10, 50, 50); .fill :preserve; .rgb(1, 1, 1); .stroke &#125;; .write_png("foobar.png")&#125; Native Cairo libraryIn order to use this module, native Cairo library is needed. See instructions at https://cairographics.org/download/. Examples doc/screenshot/arc.png doc/screenshot/clip-image.png doc/screenshot/clip.png doc/screenshot/curve-rectangle.png doc/screenshot/curve_to.png doc/screenshot/dash.png doc/screenshot/fill-and-stroke.png doc/screenshot/fill-style.png doc/screenshot/gradient.png doc/screenshot/image-pattern.png doc/screenshot/image.png doc/screenshot/multi-page-pdf.pdf doc/screenshot/multi-segment-caps.png doc/screenshot/rounded-rectangle.png]]></content>
      <categories>
        <category>Perl 6</category>
      </categories>
      <tags>
        <tag>Perl 6</tag>
        <tag>perl6</tag>
        <tag>Perl 5</tag>
        <tag>Perl</tag>
        <tag>cairo</tag>
        <tag>2D</tag>
        <tag>graphic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Perl 6 architecture 层次架构体系]]></title>
    <url>%2F2018%2F10%2F04%2FPerl-6-architecture-%E5%B1%82%E6%AC%A1%E6%9E%B6%E6%9E%84%E4%BD%93%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[Perl 6 architecture 层次架构体系]]></content>
      <categories>
        <category>Perl 6</category>
      </categories>
      <tags>
        <tag>Perl 6</tag>
        <tag>perl6</tag>
        <tag>Perl 5</tag>
        <tag>Perl</tag>
        <tag>rakudo</tag>
        <tag>VM</tag>
        <tag>moarvm</tag>
        <tag>nqp</tag>
        <tag>perl</tag>
        <tag>perl6.org</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CCSQLite Objective-C 封装的SQLite. 结合YapDatabase(key/value store) + FMDB]]></title>
    <url>%2F2018%2F09%2F09%2FCCSQLite-Objective-C-%E5%B0%81%E8%A3%85%E7%9A%84SQLite-%E7%BB%93%E5%90%88YapDatabase-key-value-store-FMDB%2F</url>
    <content type="text"><![CDATA[CCSQLite Objective-C 封装的SQLite. 结合YapDatabase(key/value store) + FMDB. 目的 转变 FMDB 到 ARC 模式 YapDatabase 键/值 store CCSQLite 结合 FMDB 和 YapDatabase 键/值 目的 转变 FMDB 到 ARC 模式 YapDatabase 键/值 store CCSQLite 结合 FMDB 和 YapDatabase 键/值 支持 OBJECT, JSON 到 键/值 缘由 &amp;&amp; 为啥 当我在写”HSCache [缓存处理方面]”, 想选择FMDB或者YapDatabase, 但是他们看起来不一样. 因此想结合YapDatabase(键/值 store) 与 FMDB, 于是 CCSQLite 在路上. 大于版本 1.1.1调整变化 Podfile1pod &apos;CCSQLite&apos; 演示for Objective-Csee CCSQLiteDemoiOS CCSQLiteiOSDemoOSX CCSQLiteOSXDemofor Swift call Objective-CiOS CCSQLiteDataiOSOSX CCSQLiteDatamacOS演示代码1#import &lt;CCSQLite.h&gt; or 1#import &quot;CCSQLite.h&quot; or 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#import "CCSQLite/CCSQLite.h"+ (void) SQLiteTest &#123; NSLog(@"SQLiteTest"); NSString *path = nil;#if TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR path = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,NSUserDomainMask, YES) lastObject];#else path = NSTemporaryDirectory() ;#endif path = [path stringByAppendingPathComponent:CCSQLiteTestDB]; if ([[NSFileManager defaultManager] fileExistsAtPath:path]) &#123; [[NSFileManager defaultManager] removeItemAtPath:path error: nil]; &#125; CCSQLite *SQLite = [CCSQLite databaseWithPath: path]; if ([SQLite open]) &#123; BOOL result = [SQLite executeUpdate: @"create table if not exists t_student (id integer primary key autoincrement, name text not NULL, age integer not NULL);"]; if (result) &#123; NSLog(@"create table t_student ok"); NSLog(@"path : %@", path); &#125; &#125; [SQLite executeUpdate:@"insert into t_student (name, age) values (?, ?);", @"cc test 0", @0]; [SQLite executeUpdate:@"insert into t_student (name, age) values (?, ?);", @"cc test 1", @1]; [SQLite executeUpdateWithFormat:@"insert into t_student (name, age) values (%@, %i);", @"cc test 2", 2000]; // [SQLite executeUpdate:@"delete from t_student where id = ?", @1]; CCResultSet *resultSet = [SQLite executeQuery:@"select * from t_student;"]; while ([resultSet next]) &#123; int idNum = [resultSet intForColumn:@"id"]; NSString *name = [resultSet objectForColumnName:@"name"]; int age = [resultSet intForColumn:@"age"]; NSLog(@"id = %d name = %@ age = %d", idNum, name, age); &#125; // [SQLite executeUpdate:@"drop table if exists t_student;"]; NSString *sql = @"create table bulktest1 (id integer primary key autoincrement, x text);" "create table bulktest2 (id integer primary key autoincrement, y text);" "create table bulktest3 (id integer primary key autoincrement, z text);" "insert into bulktest1 (x) values ('XXX');" "insert into bulktest2 (y) values ('YYY');" "insert into bulktest3 (z) values ('ZZZ');"; BOOL success = [SQLite executeStatements:sql]; if (success) &#123; NSLog(@"success"); &#125; sql = @"select count(*) as count from bulktest1;" "select count(*) as count from bulktest2;" "select count(*) as count from bulktest3;"; [SQLite executeStatements:sql withResultBlock:^int(NSDictionary *resultsDictionary) &#123; NSInteger count = [resultsDictionary[@"count"] integerValue]; NSLog(@"count = %ld", count); return 0; &#125;]; [SQLite close]; CCSQLiteQueue *queue = [CCSQLiteQueue databaseQueueWithPath:path]; __block NSInteger index = 3000; [queue inDatabase:^(CCSQLite *db) &#123; while (index &lt; 3100) &#123; index++; [db executeUpdate:@"insert into t_student (name, age) values (?, ?);", [NSString stringWithFormat:@"cc test inDatabase %ld", index], @(index)]; &#125; &#125;]; [queue inTransaction:^(CCSQLite *db, BOOL *rollback) &#123; NSLog(@"rollback NO"); while (index &lt; 3150) &#123; index++; [db executeUpdate:@"insert into t_student (name, age) values (?, ?);", [NSString stringWithFormat:@"cc test inTransaction %ld", index], @(index)]; &#125; &#125;]; [queue inTransaction:^(CCSQLite *db, BOOL *rollback) &#123; NSLog(@"rollback YES"); while (index &lt; 3200) &#123; index++; [db executeUpdate:@"insert into t_student (name, age) values (?, ?);", [NSString stringWithFormat:@"cc test inTransaction %ld", index], @(index)]; if (index == 3188) &#123; *rollback = YES; return ; &#125; &#125; &#125;];&#125; CCKeyValue 演示代码12345678910111213141516CCKeyValue *kv = [CCKeyValue defaultKeyValueWithPath:path];kv.valueType = CCKeyValueTypeJson;NSData * data = [NSData dataWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"CCJSON" ofType:@"json"]];[kv setObject:data key:@"jsonkey"];id CCJSON = [kv objectForKey:@"jsonkey"];if ([CCJSON isKindOfClass:[NSArray class]]) &#123; NSArray *list = CCJSON; [list enumerateObjectsUsingBlock:^(NSDictionary *d, NSUInteger idx, BOOL * _Nonnull stop) &#123; NSLog(@"%@\n", d); &#125;];&#125; 结果 Swift 调用 Objective-C123456789override func viewDidLoad() &#123; super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. CCSQLiteData.writeList() if let list = CCSQLiteData.readList() &#123; print(list) &#125;&#125; ###]]></content>
      <categories>
        <category>iOS &amp;&amp; macOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>macOS</tag>
        <tag>Objective-C</tag>
        <tag>CCSQLite</tag>
        <tag>FMDB</tag>
        <tag>YapDatabase</tag>
        <tag>database</tag>
        <tag>JSON</tag>
        <tag>key</tag>
        <tag>value</tag>
        <tag>cache</tag>
        <tag>sqlite</tag>
        <tag>swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CCDebug 一种灵活的、轻量级的、可扩展的、可定制的日志调试 支持iOS与macOS]]></title>
    <url>%2F2018%2F09%2F08%2FCCDebug-%E4%B8%80%E7%A7%8D%E7%81%B5%E6%B4%BB%E7%9A%84%E3%80%81%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E3%80%81%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E3%80%81%E5%8F%AF%E5%AE%9A%E5%88%B6%E7%9A%84%E6%97%A5%E5%BF%97%E8%B0%83%E8%AF%95-%E6%94%AF%E6%8C%81iOS%E4%B8%8EmacOS%2F</url>
    <content type="text"><![CDATA[CCDebug [ iOS &amp;&amp; OSX ]CCDebug : 一种灵活的、轻量级的、可扩展的、可定制的日志调试 支持 iOS &amp;&amp; OSX ======================= https://github.com/ccworld1000/CCDebug.git 首选安装 XcodeColorshttps://github.com/robbiehanson/XcodeColors 支持 Xcode 4, 5, 6, 7, 8 , 9 &amp; 10bug 或建议G Email ： ccworld1000@gmail.com Podfile1pod &apos;CCDebug&apos; Demo1234567891011121314151617181920+ (void) logTest &#123; [CCDebug debugLogSwitch: YES]; [CCDebug enableNSLogPrefix: NO]; /** * colorRGBEnable | [XcodeColors installation] https://github.com/robbiehanson/XcodeColors * screenshot https://github.com/ccworld1000/CCDebug * @param showColor showColor description */ [CCDebug colorRGBEnable: YES]; [CCDebug warningCustomColors:60 green:120 blue:60]; CCDebugWarningPrint(@&quot;cc warning&quot;); CCDebugErrorPrint(@&quot;cc error&quot;); CCDebugPrint(@&quot;cc log&quot;); CCDebugTimerPrint(@&quot;NStimer test&quot;);&#125; 截屏OSX iOS OSX Xcode_8.3.2 iOS Xcode_8.3.2 CCDebugCCDebug 简单支持 machosx 与 iOS.]]></content>
      <categories>
        <category>iOS &amp;&amp; macOS</category>
      </categories>
      <tags>
        <tag>CCDebug</tag>
        <tag>debug</tag>
        <tag>logging</tag>
        <tag>NSLog</tag>
        <tag>XcodeColors</tag>
        <tag>Xcode</tag>
        <tag>iOS</tag>
        <tag>macOS</tag>
        <tag>Objective-C</tag>
        <tag>color</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CCFont : A simple iOS and OS X CCFont replace [UIFont, NSFont], CCColor replace [UIColor, NSColor]]]></title>
    <url>%2F2018%2F09%2F01%2FCCFont-A-simple-iOS-and-OS-X-CCFont-replace-UIFont-NSFont-CCColor-replace-UIColor-NSColor%2F</url>
    <content type="text"><![CDATA[CCFont for iOS &amp;&amp; OSX======================= 英文README 简单支持 MAC OSX [&gt;=10.9] 和 iOS [&gt;=8] https://github.com/ccworld1000/CCFont.git 截图 1OSX iOS CCFontCCFont 简单支持 machosx 与 iOS, 可以简单取代 NSFont 或者 UIFont. CCColorCCColor 单支持 machosx 与 iOS, 可以简单取代 NSColor 或者 UIColor 十六进制字符串. Podfile1pod &apos;CCFont&apos; 用法1#import &lt;CCUtilities.h&gt; 或1#import &lt;CCFont/CCUtilities.h&gt; 演示代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546 HSView *p = superView; __block NSUInteger index = 0; CGFloat space, height, width; space = height = 40; width = 400; dispatch_async(dispatch_get_main_queue(), ^&#123; while (index &lt; 10) &#123; NSInteger i = 10 + index++; NSString *leftText = [NSString stringWithFormat:@&quot;L : CCFont %ld&quot;, i]; NSString *rightText = [NSString stringWithFormat:@&quot;R : CCFont %ld&quot;, i]; #if TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR UILabel *l = [UILabel new]; UILabel *r = [UILabel new]; l.text = leftText; r.text = rightText;#else NSTextField *l = [NSTextField new]; NSTextField *r = [NSTextField new]; l.stringValue = leftText; r.stringValue = rightText;#endif l.font = [CCFont systemFontOfSize: i]; r.font = [CCFont systemFontOfSize: CCHalf(i)]; if (index % 2) &#123; l.textColor = [CCColor colorWithHexString:[NSString stringWithFormat:@&quot;%f%lx%lx&quot;, 255 / (index * 1.), index * 4, index * 8]]; r.textColor = [CCColor colorWithHexString:[NSString stringWithFormat:@&quot;%f%lx%lx&quot;, 255 / (index * 1.), index * 4, index * 8]]; &#125; else &#123; l.textColor = [CCColor colorWithHexString:[NSString stringWithFormat:@&quot;%lx%x%lx&quot;, index * 4, 255, index * 8]]; r.textColor = [CCColor colorWithHexString:[NSString stringWithFormat:@&quot;%lx%x%lx&quot;, index * 4, 255, index * 8]]; &#125; l.frame = CGRectMake(CCHalf(space), index * height, CCHalf(width), height); r.frame = CGRectMake(CCHalf(width + space), index * height, CCHalf(width), height); [p addSubview: l]; [p addSubview: r]; &#125; &#125;);]]></content>
      <categories>
        <category>iOS &amp;&amp; macOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>macOS</tag>
        <tag>Objective-C</tag>
        <tag>color</tag>
        <tag>CCFont</tag>
        <tag>Foundation</tag>
        <tag>CCColor</tag>
        <tag>UIFont</tag>
        <tag>NSFont</tag>
        <tag>UIColor</tag>
        <tag>NSColor</tag>
        <tag>font</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IGListKit简单入门 CCIGListKitDemo 例子]]></title>
    <url>%2F2018%2F08%2F28%2FIGListKit%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8-CCIGListKitDemo-%E4%BE%8B%E5%AD%90%2F</url>
    <content type="text"><![CDATA[简单IGListKit入门简单滴框架示意图 代码逻辑数据项 DemoItem实现 IGListDiffable12345678910111213- (nonnull id&lt;NSObject&gt;)diffIdentifier &#123; return _name;&#125;- (BOOL)isEqualToDiffableObject:(nullable id&lt;IGListDiffable&gt;)object &#123; if (self == object) &#123; return YES; &#125; DemoItem *item = (DemoItem *)object; return _controllerClass == item.controllerClass &amp;&amp; _controllerIdentifier == item.controllerIdentifier;&#125; 数据列表12345678910111213141516171819202122232425262728- (NSArray *)demos &#123; if (!_demos) &#123; _demos = @[ [[DemoItem alloc] initWithName:@"Tail Loading" controllerClass: @"LoadMoreViewController"], [[DemoItem alloc] initWithName:@"Search Autocomplete" controllerClass: @"SearchViewController"], [[DemoItem alloc] initWithName:@"Mixed Data" controllerClass: @"MixedDataViewController"], [[DemoItem alloc] initWithName:@"Nested Adapter" controllerClass: @"NestedAdapterViewController"], [[DemoItem alloc] initWithName:@"Empty View" controllerClass: @"EmptyViewController"], [[DemoItem alloc] initWithName:@"Single Section Controller" controllerClass: @"SingleSectionViewController"], [[DemoItem alloc] initWithName:@"Storyboard" controllerClass: @"SingleSectionViewController" controllerIdentifier: @"demo"], [[DemoItem alloc] initWithName:@"Single Section Storyboard" controllerClass: @"SingleSectionStoryboardViewController" controllerIdentifier: @"singleSectionDemo"], [[DemoItem alloc] initWithName:@"Working Range" controllerClass: @"WorkingRangeViewController"], [[DemoItem alloc] initWithName:@"Diff Algorithm" controllerClass: @"DiffTableViewController"], [[DemoItem alloc] initWithName:@"Supplementary Views" controllerClass: @"SupplementaryViewController"], [[DemoItem alloc] initWithName:@"Self-sizing cells" controllerClass: @"SelfSizingCellsViewController"], [[DemoItem alloc] initWithName:@"Display delegate" controllerClass: @"DisplayViewController"], [[DemoItem alloc] initWithName:@"Stacked Section Controllers" controllerClass: @"StackedViewController"], [[DemoItem alloc] initWithName:@"Objc Demo" controllerClass: @"ObjcDemoViewController"], [[DemoItem alloc] initWithName:@"Objc Generated Model Demo" controllerClass: @"ObjcGeneratedModelDemoViewController"], [[DemoItem alloc] initWithName:@"Calendar (auto diffing)" controllerClass: @"CalendarViewController"], [[DemoItem alloc] initWithName:@"Dependency Injection" controllerClass: @"AnnouncingDepsViewController"], [[DemoItem alloc] initWithName:@"Reorder Cells" controllerClass: @"ReorderableViewController"], [[DemoItem alloc] initWithName:@"Reorder Stacked Section Controllers" controllerClass: @"ReorderableStackedViewController"], ]; &#125; return _demos;&#125; 绑定数据列表123- (NSArray&lt;id &lt;IGListDiffable&gt;&gt; *)objectsForListAdapter:(IGListAdapter *)listAdapter &#123; return self.demos;&#125; 绑定IGListSectionController1234567- (IGListSectionController *)listAdapter:(IGListAdapter *)listAdapter sectionControllerForObject:(id)object &#123; return [DemoSectionController new];&#125;- (nullable UIView *)emptyViewForListAdapter:(IGListAdapter *)listAdapter &#123; return nil;&#125; adapter 与 collectionView 关联12self.adapter.collectionView = self.collectionView;self.adapter.dataSource = self; DemoSectionController 关联 cell1234567891011121314151617181920212223242526272829303132333435- (CGSize)sizeForItemAtIndex:(NSInteger)index &#123; return CGSizeMake(self.collectionContext.containerSize.width, 55);&#125;- (UICollectionViewCell *)cellForItemAtIndex:(NSInteger)index &#123; LabelCell *cell = [self.collectionContext dequeueReusableCellOfClass:[LabelCell class] forSectionController:self atIndex:index]; cell.text = self.item.name; return cell;&#125;- (void)didUpdateToObject:(id)object &#123; self.item = object;&#125;- (void)didSelectItemAtIndex:(NSInteger)index &#123; NSString *classString = self.item.controllerClass; NSString *controllerIdentifier = self.item.controllerIdentifier; CCDebugPrint(classString); UIViewController *vc = nil; if (controllerIdentifier) &#123; UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Demo" bundle: nil]; vc = [storyboard instantiateViewControllerWithIdentifier:controllerIdentifier]; &#125; else &#123; vc = [NSClassFromString(classString) new]; &#125; if (vc) &#123; vc.title = self.item.name; [self.viewController.navigationController pushViewController:vc animated: NO]; &#125; else &#123; CCDebugWarningPrint([NSString stringWithFormat:@"%@ : [The interface may not be implemented] ", classString]); &#125;&#125; 更多细节查查看CCIGListKitDemo]]></content>
      <categories>
        <category>CCIGListKitDemo &amp;&amp; IGListKit</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
        <tag>IGListKit</tag>
        <tag>CCIGListKitDemo</tag>
        <tag>IGListSectionController</tag>
        <tag>IGListAdapter</tag>
        <tag>UIViewController</tag>
        <tag>IGListDiffable</tag>
        <tag>UIColllectionView</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Perl 6 perl6.org 网站中文翻译]]></title>
    <url>%2F2018%2F08%2F25%2FPerl-6-perl6-org-%E7%BD%91%E7%AB%99%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91%2F</url>
    <content type="text"><![CDATA[本数据仓缘由 很多年过去,有关Perl 6相关的中文文档少之又少. 于是我打算翻译一些部分文档入口促进Perl 6 在中国的发展. 如果有一定的英文功底,建议直接看官方文档. 部分文档直接按英语翻译过来的意思可能不太好,所以有的采用意译. 2018/04/10 by CC Perl 5 &amp;&amp; Perl 6 讲到Perl 6 就不得不提Perl 5,后续我简写为P6 与 P5. 建议把P6当成一门新语言,可能对接触过P5的童鞋来讲是一样的. 不过他们确实很多相识点,更多细节需要通过学习深入了解, 祝大家在P6的路途愉快. 翻译进度 网站主体入口差不多翻译完成。 doc模块https://github.com/ccworld1000/doc还没有咋开始。 缘由：编译通不过去，一旦开始翻译就没有办法与官网同步。 如果有更好的提议，欢迎提议。 已翻译入口 P6官方中文文档入口1 或者 P6官方中文文档入口2 翻译当前进度：大致入口翻译已经完毕，可以下载到本地运行。 贡献本数据仓 如果想帮忙可以fork [https://github.com/ccworld1000/perl6.org](https://github.com/ccworld1000/perl6.org),帮助形式不限. 项目本身采用我私用工具CCAutoTag自动打tag,这个实际上也是最近用P6完成的. 截屏]]></content>
      <categories>
        <category>Perl 6</category>
      </categories>
      <tags>
        <tag>Perl 6</tag>
        <tag>Perl 5</tag>
        <tag>Perl</tag>
        <tag>perl</tag>
        <tag>perl6.org</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OKKLineMin kline for min for learning for iPhone (support Swift4 & iPhone X)]]></title>
    <url>%2F2018%2F08%2F23%2FOKKLineMin-kline-for-min-for-learning-for-iPhone-support-Swift4-iPhone-X%2F</url>
    <content type="text"><![CDATA[OKKLineMin介绍OKKLineMin kline for min for learning for iPhone* (支持 Swift4 &amp; iPhone X)* (主要用于学习目的) 截屏[支持 拖曳、 长按 、缩放] iPhone X 全屏 iPhone X 半屏 iPhone 设备]]></content>
      <categories>
        <category>金融</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>OKKLineMin</tag>
        <tag>kline</tag>
        <tag>K线，Swift</tag>
        <tag>iPhone X</tag>
        <tag>OKKLineSwift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CCSugar Foundation 附加函数集]]></title>
    <url>%2F2018%2F08%2F22%2FCCSugar-Foundation-%E9%99%84%E5%8A%A0%E5%87%BD%E6%95%B0%E9%9B%86%2F</url>
    <content type="text"><![CDATA[Write Objective C like a boss. Foundation 附加函数集函数集. 支持 MAC OS 与 iOS始于 ObjectiveSugar 1.1.1 用法 CocoaPods安装 1pod &apos;CCSugar&apos; 导入头文件 1#import &lt;CCSugar.h&gt; 或者 1​ #import “CCSugar.h” ​12345```### 文档 [更多查阅 [CCSugar](https://github.com/ccworld1000/CCSugar) 源码]**NSNumber** 集 [@3 times:^{ NSLog(@&quot;Hello!&quot;); }]; // Hello! // Hello! // Hello! [@3 timesWithIndex:^(NSUInteger index) { NSLog(@&quot;Another version with number: %lu&quot;, (unsigned long)index); }]; // Another version with number: 0 // Another version with number: 1 // Another version with number: 2 [@1 upto:4 do:^(NSInteger numbah) { NSLog(@&quot;Current number.. %ld&quot;, (long)numbah); }]; // Current number.. 1 // Current number.. 2 // Current number.. 3 // Current number.. 4 [@7 downto:4 do:^(NSInteger numbah) { NSLog(@&quot;Current number.. %ld&quot;, (long)numbah); }]; // Current number.. 7 // Current number.. 6 // Current number.. 5 // Current number.. 4 NSDate *firstOfDecember = [NSDate date]; // let&apos;s pretend it&apos;s 1st of December NSDate *firstOfNovember = [(@30).days since:firstOfDecember]; NSLog(@&quot;firstOfNovember : %@&quot;, firstOfNovember); NSDate *future = (@24).days.fromNow; NSLog(@&quot;future : %@&quot;, future); NSDate *past = @(1).month.ago; NSLog(@&quot;past : %@&quot;, past); 1234\--**NSArray** / **NSSet** 集 // All of these methods return a modified copy of the array.// They’re not modifying the source array. NSArray *cars = @[@”Testarossa”, @”F50”, @”F458 Italia”]; // or NSSet [cars each:^(id object) { NSLog(@”Car: %@”, object);}];// Car: Testarossa// Car: F50// Car: F458 Italia [cars eachWithIndex:^(id object, NSUInteger index) { NSLog(@”Car: %@ index: %i”, object, index);}];// Car: Testarossa index: 0// Car: F50 index: 1// Car: F458 Italia index: 2 [cars each:^(id object) { NSLog(@”Car: %@”, object);} options:NSEnumerationReverse];// Car: F458 Italia// Car: F50// Car: Testarossa [cars eachWithIndex:^(id object, NSUInteger index) { NSLog(@”Car: %@ index: %i”, object, index);} options:NSEnumerationReverse];// Car: F458 Italia index: 2// Car: F50 index: 1// Car: Testarossa index: 0 [cars map:^(NSString* car) { return car.lowercaseString;}];// testarossa, f50, f458 italia // Or, a more common example:[cars map:^(NSString* carName) { return [[Car alloc] initWithName:carName];}];// array of Car objects NSArray *mixedData = @[ @1, @”Objective Sugar!”, @”Github”, @4, @”5”]; [mixedData select:^BOOL(id object) { return ([object class] == [NSString class]);}];// Objective Sugar, Github, 5 [mixedData reject:^BOOL(id object) { return ([object class] == [NSString class]);}];// 1, 4 NSArray *numbers = @[ @5, @2, @7, @1 ];[numbers sort];// 1, 2, 5, 7 cars.sample// 458 Italiacars.sample// F5012-- 仅仅针对**NSArray** NSArray *numbers = @[@1, @2, @3, @4, @5, @6]; // index from 2 to 4numbers[@”2..4”];// [@3, @4, @5] // index from 2 to 4 (excluded)numbers[@”2…4”];// [@3, @4] // With NSRange location: 2, length: 4numbers[@”2,4”];// [@3, @4, @5, @6] NSValue *range = [NSValue valueWithRange:NSMakeRange(2, 4)];numbers[range];// [@3, @4, @5, @6] [numbers reverse];// [@6, @5, @4, @3, @2, @1] NSArray *fruits = @[ @”banana”, @”mango”, @”apple”, @”pear” ]; [fruits includes:@”apple”];// YES [fruits take:3];// banana, mango, apple [fruits takeWhile:^BOOL(id fruit) { return ![fruit isEqualToString:@”apple”];}];// banana, mango NSArray *nestedArray = @[ @[ @1, @2, @3 ], @[ @4, @5, @6, @[ @7, @8 ] ], @9, @10 ];[nestedArray flatten];// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 NSArray *abc = @[ @”a”, @”b”, @”c” ];[abc join];// abc [abc join:@”-“];// a-b-c NSArray *mixedData = @[ @1, @”Objective Sugar!”, @”Github”, @4, @”5”]; [mixedData detect:^BOOL(id object) { return ([object class] == [NSString class]);}];// Objective Sugar // TODO: Make a better / simpler example of thisNSArray landlockedCountries = @[ @”Bolivia”, @”Paraguay”, @”Austria”, @”Switzerland”, @”Hungary” ];NSArray europeanCountries = @[ @”France”, @”Germany”, @”Austria”, @”Spain”, @”Hungary”, @”Poland”, @”Switzerland” ]; [landlockedCountries intersectionWithArray:europeanCountries];// landlockedEuropeanCountries = Austria, Switzerland, Hungary [landlockedCountries unionWithArray:europeanCountries];// landlockedOrEuropean = Bolivia, Paraguay, Austria, Switzerland, Hungary, France, Germany, Spain, Poland [landlockedCountries relativeComplement:europeanCountries];// nonEuropeanLandlockedCountries = Bolivia, Paraguay [europeanCountries relativeComplement:landlockedCountries];// notLandlockedEuropeanCountries = France, Germany, Spain, Poland [landlockedCountries symmetricDifference:europeanCountries];// uniqueCountries = Bolivia, Paraguay, France, Germany, Spain, Poland12-- **NSMutableArray** 集 NSMutableArray *people = [NSMutableArray arrayWithArray:@[ @”Alice”, @”Benjamin”, @”Christopher” ]]; [people push:@”Daniel”]; // Alice, Benjamin, Christopher, Daniel [people pop]; // Daniel// people = Alice, Benjamin, Christopher [people pop:2]; // Benjamin, Christopher// people = Alice [people concat:@[ @”Evan”, @”Frank”, @”Gavin” ]];// people = Alice, Evan, Frank, Gavin [people keepIf:^BOOL(id object) { return [object characterAtIndex:0] == ‘E’;}];// people = Evan12-- **NSDictionary** 集 NSDictionary *dict = @{ @”one” : @1, @”two” : @2, @”three” : @3 }; [dict each:^(id key, id value){ NSLog(@”Key: %@, Value: %@”, key, value);}];// Key: one, Value: 1// Key: two, Value: 2// Key: three, Value: 3 [dict eachKey:^(id key) { NSLog(@”Key: %@”, key);}];// Key: one// Key: two// Key: three [dict eachValue:^(id value) { NSLog(@”Value: %@”, value);}];// Value: 1// Value: 2// Value: 3 [dict invert];// { 1 = one, 2 = two, 3 = three} NSDictionary *errors = @{ @”username” : @[ @”already taken” ], @”password” : @[ @”is too short (minimum is 8 characters)”, @”not complex enough” ], @”email” : @[ @”can’t be blank” ];}; [errors map:^(id attribute, id reasons) { return NSStringWithFormat(@”%@ %@”, attribute, [reasons join:@”, “]);}];// username already taken// password is too short (minimum is 8 characters), not complex enough// email can’t be blank [errors hasKey:@”email”]// true[errors hasKey:@”Alcatraz”]// false12-- **NSString** 集 NSString *sentence = NSStringWithFormat(@”This is a text-with-argument %@”, @1234);// This is a text-with-argument 1234 [sentence split];// array = this, is, a, text-with-argument, 1234 [sentence split:@”-“]// array = this is a text, with, argument 1234 [sentence containsString:@”this is a”];// YES [sentence match:@”-[a-z]+-“]// -with-12-- **C** 集 unless(_messages) { // The body is only executed if the condition is false _messages = [self initializeMessages];} int iterations = 10;until(iterations == 0) { // The body is executed until the condition is false // 10 9 8 7 6 5 4 3 2 1 printf(“%d “, iterations); iterations–;}printf(“\n”); iterations = 10;do { // The body is executed at least once until the condition is false // Will print: Executed! printf(“Executed!\n”);} until(true);`]]></content>
      <categories>
        <category>iOS &amp;&amp; macOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>macOS</tag>
        <tag>Objective-C</tag>
        <tag>Foundation</tag>
        <tag>CCSugar</tag>
        <tag>c</tag>
        <tag>C</tag>
        <tag>NSNumber</tag>
        <tag>NSArray</tag>
        <tag>NSSet</tag>
        <tag>NSMutableArray</tag>
        <tag>NSDictionary</tag>
        <tag>NSString</tag>
        <tag>ObjectiveSugar</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CCTALib TA-Lib 广泛应用于交易开发分析金融市场数据]]></title>
    <url>%2F2018%2F08%2F21%2FCCTALib-TA-Lib-%E5%B9%BF%E6%B3%9B%E5%BA%94%E7%94%A8%E4%BA%8E%E4%BA%A4%E6%98%93%E5%BC%80%E5%8F%91%E5%88%86%E6%9E%90%E9%87%91%E8%9E%8D%E5%B8%82%E5%9C%BA%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[CCTALibCCTALib : TA-Lib is widely used by trading software developers requiring to perform technical analysis of financial market data Multi-Platform Tools for Market Analysis …TA-Lib is widely used by trading software developers requiring to perform technical analysis of financial market data. Includes 200 indicators such as ADX, MACD, RSI, Stochastic, Bollinger Bands etc… Candlestick pattern recognition Open-source API for C/C++, Java, Perl, Python and 100% Managed .NET Free Open-Source LibraryTA-Lib is available under a BSD License allowing it to be integrated in your own open-source or commercial application. Commercial ApplicationTA-Lib is also available as an easy to install Excel Add-Ins. Technical Analysis Library123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138AD Chaikin A/D LineADOSC Chaikin A/D OscillatorADX Average Directional Movement IndexADXR Average Directional Movement Index RatingAPO Absolute Price OscillatorAROON AroonAROONOSC Aroon OscillatorATR Average True RangeAVGPRICE Average PriceBBANDS Bollinger BandsBETA BetaBOP Balance Of PowerCCI Commodity Channel IndexCDL2CROWS Two CrowsCDL3BLACKCROWS Three Black CrowsCDL3INSIDE Three Inside Up/DownCDL3LINESTRIKE Three-Line Strike CDL3OUTSIDE Three Outside Up/DownCDL3STARSINSOUTH Three Stars In The SouthCDL3WHITESOLDIERS Three Advancing White SoldiersCDLABANDONEDBABY Abandoned BabyCDLADVANCEBLOCK Advance BlockCDLBELTHOLD Belt-holdCDLBREAKAWAY BreakawayCDLCLOSINGMARUBOZU Closing MarubozuCDLCONCEALBABYSWALL Concealing Baby SwallowCDLCOUNTERATTACK CounterattackCDLDARKCLOUDCOVER Dark Cloud CoverCDLDOJI DojiCDLDOJISTAR Doji StarCDLDRAGONFLYDOJI Dragonfly DojiCDLENGULFING Engulfing PatternCDLEVENINGDOJISTAR Evening Doji StarCDLEVENINGSTAR Evening StarCDLGAPSIDESIDEWHITE Up/Down-gap side-by-side white linesCDLGRAVESTONEDOJI Gravestone DojiCDLHAMMER HammerCDLHANGINGMAN Hanging ManCDLHARAMI Harami PatternCDLHARAMICROSS Harami Cross PatternCDLHIGHWAVE High-Wave CandleCDLHIKKAKE Hikkake PatternCDLHIKKAKEMOD Modified Hikkake PatternCDLHOMINGPIGEON Homing PigeonCDLIDENTICAL3CROWS Identical Three CrowsCDLINNECK In-Neck PatternCDLINVERTEDHAMMER Inverted HammerCDLKICKING KickingCDLKICKINGBYLENGTH Kicking - bull/bear determined by the longer marubozuCDLLADDERBOTTOM Ladder BottomCDLLONGLEGGEDDOJI Long Legged DojiCDLLONGLINE Long Line CandleCDLMARUBOZU MarubozuCDLMATCHINGLOW Matching LowCDLMATHOLD Mat HoldCDLMORNINGDOJISTAR Morning Doji StarCDLMORNINGSTAR Morning StarCDLONNECK On-Neck PatternCDLPIERCING Piercing PatternCDLRICKSHAWMAN Rickshaw ManCDLRISEFALL3METHODS Rising/Falling Three MethodsCDLSEPARATINGLINES Separating LinesCDLSHOOTINGSTAR Shooting StarCDLSHORTLINE Short Line CandleCDLSPINNINGTOP Spinning TopCDLSTALLEDPATTERN Stalled PatternCDLSTICKSANDWICH Stick SandwichCDLTAKURI Takuri (Dragonfly Doji with very long lower shadow)CDLTASUKIGAP Tasuki GapCDLTHRUSTING Thrusting PatternCDLTRISTAR Tristar PatternCDLUNIQUE3RIVER Unique 3 RiverCDLUPSIDEGAP2CROWS Upside Gap Two CrowsCDLXSIDEGAP3METHODS Upside/Downside Gap Three MethodsCMO Chande Momentum OscillatorCORREL Pearson&apos;s Correlation Coefficient (r)DEMA Double Exponential Moving AverageDX Directional Movement IndexEMA Exponential Moving AverageHT_DCPERIOD Hilbert Transform - Dominant Cycle PeriodHT_DCPHASE Hilbert Transform - Dominant Cycle PhaseHT_PHASOR Hilbert Transform - Phasor ComponentsHT_SINE Hilbert Transform - SineWaveHT_TRENDLINE Hilbert Transform - Instantaneous TrendlineHT_TRENDMODE Hilbert Transform - Trend vs Cycle ModeKAMA Kaufman Adaptive Moving AverageLINEARREG Linear RegressionLINEARREG_ANGLE Linear Regression AngleLINEARREG_INTERCEPT Linear Regression InterceptLINEARREG_SLOPE Linear Regression SlopeMA All Moving AverageMACD Moving Average Convergence/DivergenceMACDEXT MACD with controllable MA typeMACDFIX Moving Average Convergence/Divergence Fix 12/26MAMA MESA Adaptive Moving AverageMAX Highest value over a specified periodMAXINDEX Index of highest value over a specified periodMEDPRICE Median PriceMFI Money Flow IndexMIDPOINT MidPoint over periodMIDPRICE Midpoint Price over periodMIN Lowest value over a specified periodMININDEX Index of lowest value over a specified periodMINMAX Lowest and highest values over a specified periodMINMAXINDEX Indexes of lowest and highest values over a specified periodMINUS_DI Minus Directional IndicatorMINUS_DM Minus Directional MovementMOM MomentumNATR Normalized Average True RangeOBV On Balance VolumePLUS_DI Plus Directional IndicatorPLUS_DM Plus Directional MovementPPO Percentage Price OscillatorROC Rate of change : ((price/prevPrice)-1)*100ROCP Rate of change Percentage: (price-prevPrice)/prevPriceROCR Rate of change ratio: (price/prevPrice)ROCR100 Rate of change ratio 100 scale: (price/prevPrice)*100RSI Relative Strength IndexSAR Parabolic SARSAREXT Parabolic SAR - ExtendedSMA Simple Moving AverageSTDDEV Standard DeviationSTOCH StochasticSTOCHF Stochastic FastSTOCHRSI Stochastic Relative Strength IndexSUM SummationT3 Triple Exponential Moving Average (T3)TEMA Triple Exponential Moving AverageTRANGE True RangeTRIMA Triangular Moving AverageTRIX 1-day Rate-Of-Change (ROC) of a Triple Smooth EMATSF Time Series ForecastTYPPRICE Typical PriceULTOSC Ultimate OscillatorVAR VarianceWCLPRICE Weighted Close PriceWILLR Williams&apos; %RWMA Weighted Moving Average]]></content>
      <categories>
        <category>金融</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>macOS</tag>
        <tag>Objective-C</tag>
        <tag>c</tag>
        <tag>CCTALib</tag>
        <tag>TA-Lib</tag>
        <tag>talib</tag>
        <tag>financial market</tag>
        <tag>market analysi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CCRuntime Objective-C 封装 runtime APIs]]></title>
    <url>%2F2018%2F08%2F19%2FCCRuntime-Objective-C-%E5%B0%81%E8%A3%85-runtime-APIs%2F</url>
    <content type="text"><![CDATA[CCRuntimeCCRuntime 转换 MAObjCRuntime 为 ARC 模式 CCRuntime 是基于Objective-C 运行时封装的APIs集. 如果令人困惑, 它提供友好的面向对象接口基于/usr/include/objc中的C函数. CCRuntime在BSD许可证下发布的。对于官方许可证，请参阅许可证文件。 快速开始The action begins in CCRuntime.h. Various methods are added to NSObject to allow querying and manipulation. Most of these are class methods, because they operate on classes. There are a couple of instance methods as well. All of these methods start with cc_ to avoid name conflicts. The CCMethod and CCIvar classes are used to represent a single method and a single instance variable, respectively. Their use should be fairly obvious. 查询You can query any class’s methods, instance variables, or other attributes using the methods provided. For example: 12345678910111213// get all subclasses of a classNSArray *subclasses = [MyClass cc_subclasses];// check out the methods on NSStringNSArray *methods = [NSString cc_methods];for(CCMethod *method in methods) NSLog(@"%@", method);// does it have any ivars?NSLog(@"%@", [NSString cc_ivars]);// how big is a constant string instance?NSLog(@"%ld", (long)[[@"foo" cc_class] cc_instanceSize]); 修改You can add new methods using +cc_addMethod:. You can modify the implementation of an existing method using the -setImplementation: method on CCMethod. Example: 12345678// swizzle out -[NSObject description] (don&apos;t do this)static NSString *NewDescription(id self, SEL _cmd)&#123; return @&quot;HELLO WORLD!&quot;;&#125;CCMethod *description = [NSObject cc_methodForSelector: @selector(description)];[description setImplementation: (IMP)NewDescription]; You can create new classes using +cc_createSubclassNamed: or +cc_createUnregisteredSubclassNamed:. Note that if you want to add instance variables to a class then you have to use the Unregistered version, and add them before registering the class. ObjectsTwo instance methods are provided as well. -cc_class exists because Apple likes to fiddle with the return value of -class, and -cc_class always gives you the right value. -cc_setClass: does pretty much what it says: sets the class of the object. It won’t reallocate the object or anything, so the new class had better have a memory layout that’s compatible with the old one, or else hilarity will ensue. 发送消息After getting a list of methods from a class, it’s common to want to actually use those on instances of the class. CCMethodprovides an easy method for doing this, as well as several convenience wrappers around it. The basic method for sending messages is -[CCMethod returnValue:sendToTarget:]. You use it like this: 123CCMethod *method = ...;SomeType ret;[method returnValue: &amp;ret sendToTarget: obj, CCARG(@"hello"), CCARG(42), CCARG(xyz)]; It may seem odd to have the return value at the beginning of the argument list, but this comes closest to the order of the normal ret = [obj method] syntax. All arguments must be wrapped in the CCARG macro. This macro takes care of packaging up each argument so that it can survive passage through the variable argument list and also includes some extra metadata about the argument types so that the code can do some basic sanity checking. No automatic type conversions are performed. If you pass a double to a method that expects an int, this method will abort. That checking is only based on size, however, so if you pass a float where an int is expected, you’ll just get a bad value. Note that while it’s not 100% guaranteed, this code does a generally good job of detecting if you forgot to use the CCARGmacro and warning you loudly and calling abort instead of simply crashing in a mysterious manner. Also note that there is no sanity checking on the return value, so it’s your responsibility to ensure that you use the right type and have enough space to hold it. For methods which return an object, the -[CCMethod sendToTarget:] method is provided which directly returns idinstead of making you use return-by-reference. This simplifies the calling of such methods: 12CCMethod *method = ...;id ret = [method sendToTarget: obj, CCARG(@"hello"), CCARG(42), CCARG(xyz)]; There is also an NSObject category which provides methods that allows you to switch the order around to be more natural. For example: 12CCMethod *method = ...;id ret = [obj cc_sendMethod: method, CCARG(@"hello"), CCARG(42), CCARG(xyz)]; And the same idea for cc_returnValue:sendMethod:. Finally, there are a pair of convenience methods that take a selector, and combine the method lookup with the actual message sending: 123id ret = [obj cc_sendSelector: @selector(...), CCARG(@"hello"), CCARG(42), CCARG(xyz)];SomeType ret2;[obj cc_returnValue: &amp;ret2 sendSelector: @selector(...), CCARG(12345)];]]></content>
      <categories>
        <category>iOS &amp;&amp; macOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>macOS</tag>
        <tag>Objective-C</tag>
        <tag>CCRuntime</tag>
        <tag>runtime</tag>
        <tag>MAObjCRuntime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IGListKit 简化 优化 项目]]></title>
    <url>%2F2018%2F08%2F19%2FIGListKit-%E7%AE%80%E5%8C%96-%E4%BC%98%E5%8C%96-%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[## IGListKit 优势 一个数据驱动的“UICollectionView”框架，用于构建快速灵活的列表。 主要特性 🙅 不要直接调用 performBatchUpdates(_:, completion:) 或 reloadData() 🏠 更好的可复用cell和组件体系结构 🔠 创建具有多个数据类型的集合 🔑 解耦扩散算法 ✅ 全单元测试 🔍 自定义差异行为模型的 📱 简化 UICollectionView核心 🚀 可扩展API 🐦 Objective-C编写,同时完全支持Swift 更多详情请参考 CCIGListKitDemo 可参加demo具体代码]]></content>
      <categories>
        <category>组件优化</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
        <tag>IGListKit</tag>
        <tag>CCIGListKitDemo</tag>
        <tag>UIColllectionView</tag>
      </tags>
  </entry>
</search>
